to-do, doing and done for the different kernels before implementing full kernel.

// implement everything before refine 3 first.
to-do
multmod-function 
powdiff-function
step-function 
ez-function 
eq-function
refine3-function // comprised of other sub-functions shift and step 
shinv // the big one, last before full division kernel
div_shinv // final 
init-function  // prop not needed in final cuda kernel, handle allocation of bigints directly
zero-function  // prop not needed in final cuda kernel, handle zero'ing of bigints directly
cpy  // prop not needed, handle copying directly in kernel?

    
doing 
bpow-function    // functions eists needed testing
multd-function   // bug/not fully correct
set-function     // bug/not fully correct
prec-function    // bug/not fully correct
lt-function      // needs to be done at warp level, maybe shift to a scan implementation? 
quo-function     // unsure if this can even be done in parrallel, using normal division,   


done:
shift-function   // shift function done, and seems to be fully correct


note:
all functions needed proper stress and batchd testing to ensure correctness.






timing test with "timing":

all enganged     = 1414745 mcs

shinv disengaged = 884998 mcs 

shinv is 38 % of runtime 

bmulRegsQComplete disengaged = 733350 mcs 

bmulRegsQComplete is 48 % of runtime 

shiftDouble disengaged = 1414472 msc

shiftDouble is 0% of runtime 

bmulRegsQ disengaged = 1278520 msc 

bmulRegsQ is 10 % of runtime

bSubregsQ disengaged = 1433617

bSubregsQ is -1 % of runtime

if-statement disengaged = 1416056 msc

0 % of runtime 

2X cpyReg2Sh2Glb disengaged = 1409772 msc 

1 % of runtime 



% cosmin 

N^2 Multiplication of 131072-bits Big-Numbers (in base = 64 bits) 
runs 32768 instances in: 105200 microsecs, 
Gu32ops/sec: 4593.00, 
Mil-Instances/sec: 0.31


bmulRegsQComplete timing:

all enganged = 30227069 msc

baddRegs disengaged = 2964137 msc 

2 % of runtime  

from4Reg2ShmQ disengaged =  2769262

8 % of runtime 

wrapperConvQ1 disengaged = 1468388

49 % of runtime 


    first convolutionq1 disengaged = 2434098

    19 % of runtime

    second convolutionQ1 disengaged = 2306798

    23 % of runtime 




kernel comment 10/4

maybe its possible if the compiler can figure this out. 

we are casting a register 

can i write this with out indexing.



remove pragma unroll, with bound is not staticcally known. example quo

the register assigment is bad, because it cannot allow scalerication.


dont we need a barrier after prec.

change prec to only use one atomic max

set is also using non-linear indexing.

inside refine h is staticcily unknown. so no unrolling.  

most important thing, if we use register array they have to be scalarisable. 